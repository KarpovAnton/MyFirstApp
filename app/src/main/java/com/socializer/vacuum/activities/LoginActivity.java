package com.socializer.vacuum.activities;import android.Manifest;import android.app.Activity;import android.content.Intent;import android.content.pm.PackageManager;import android.os.Build;import android.os.Bundle;import android.text.TextUtils;import android.widget.EditText;import android.widget.Toast;import androidx.annotation.NonNull;import androidx.annotation.Nullable;import androidx.core.app.ActivityCompat;import com.afollestad.materialdialogs.MaterialDialog;import com.facebook.AccessToken;import com.facebook.CallbackManager;import com.facebook.FacebookCallback;import com.facebook.FacebookException;import com.facebook.login.LoginResult;import com.socializer.vacuum.R;import com.socializer.vacuum.commons.AuthenticationDialog;import com.socializer.vacuum.network.data.DtoCallback;import com.socializer.vacuum.network.data.FailTypes;import com.socializer.vacuum.network.data.dto.ProfilePreviewDto;import com.socializer.vacuum.network.data.dto.RegistrationResponseDto;import com.socializer.vacuum.network.data.dto.ResponseDto;import com.socializer.vacuum.network.data.managers.LoginManager;import com.socializer.vacuum.services.BleManager;import com.socializer.vacuum.utils.DialogUtils;import com.socializer.vacuum.utils.StringPreference;import com.vk.sdk.VKAccessToken;import com.vk.sdk.VKCallback;import com.vk.sdk.VKSdk;import com.vk.sdk.api.VKError;import java.util.Arrays;import java.util.UUID;import javax.inject.Inject;import javax.inject.Named;import butterknife.BindView;import butterknife.ButterKnife;import butterknife.OnClick;import dagger.android.support.DaggerAppCompatActivity;import timber.log.Timber;import static com.socializer.vacuum.network.data.prefs.PrefsModule.NAMED_PREF_DEVICE_NAME;import static com.socializer.vacuum.utils.Consts.BASE_DEVICE_NAME_PART;import static com.socializer.vacuum.utils.Consts.LOCATION_PERMISSION_CODE;public class LoginActivity extends DaggerAppCompatActivity implements AuthenticationDialog.AuthInstListener {    @Inject    LoginManager loginManager;    @Inject    BleManager bleManager;    @Inject    @Named(NAMED_PREF_DEVICE_NAME)    StringPreference deviceNameSP;    @BindView(R.id.nameEditText)    EditText nameEditText;    String uniqueUUID;    Activity mActivity;    MaterialDialog regWaitingDialog;    private CallbackManager callbackManager;    @Override    protected void onCreate(@Nullable Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_login);        ButterKnife.bind(this);        uniqueUUID = UUID.randomUUID().toString();        mActivity = this;//TODO DELETE        callbackManager = CallbackManager.Factory.create();        // Callback registration        com.facebook.login.LoginManager.getInstance().registerCallback(callbackManager, new FacebookCallback<LoginResult>() {            @Override            public void onSuccess(LoginResult loginResult) {                Toast.makeText(mActivity, "onSuccess", Toast.LENGTH_SHORT).show();                AccessToken accessToken = loginResult.getAccessToken();                String socialUserId = accessToken.getUserId();                String token = accessToken.getToken();                fbReg(socialUserId, token);            }            @Override            public void onCancel() {                Toast.makeText(mActivity, "onCancel", Toast.LENGTH_SHORT).show();            }            @Override            public void onError(FacebookException exception) {                Toast.makeText(mActivity, "onError", Toast.LENGTH_SHORT).show();            }        });        checkPermissions();    }    @Override    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {        if (!VKSdk.onActivityResult(requestCode, resultCode, data, new VKCallback<VKAccessToken>() {            @Override            public void onResult(VKAccessToken res) {                vkReg(res.userId, res.accessToken, res.expiresIn);            }            @Override            public void onError(VKError error) {                // Произошла ошибка авторизации (например, пользователь запретил авторизацию)            }})) {            //if not vk, then...            callbackManager.onActivityResult(requestCode, resultCode, data);            super.onActivityResult(requestCode, resultCode, data);        }    }    private void fbReg(String socialUserId, String accessToken) {        loginManager.sendFbData(socialUserId, accessToken, new DtoCallback<ResponseDto>() {            @Override            public void onSuccessful(@NonNull ResponseDto response) {                regWaitingDialog.dismiss();                setResult(RESULT_OK);                finish();            }            @Override            public void onFailed(FailTypes fail) {                regWaitingDialog.dismiss();            }        });    }    private void vkReg(String socialUserId, String accessToken, int expiresIn) {        regWaitingDialog = DialogUtils.showWaitingDialog(                mActivity,                R.string.registration_dialog_title,                R.string.waiting_dialog_msg);        loginManager.sendVkData(socialUserId, accessToken, expiresIn, new DtoCallback<ResponseDto>() {            @Override            public void onSuccessful(@NonNull ResponseDto response) {                ProfilePreviewDto dto = (ProfilePreviewDto) response;                saveUserID(dto.getUserId());                regWaitingDialog.dismiss();                setResult(RESULT_OK);                finish();            }            @Override            public void onFailed(FailTypes fail) {                regWaitingDialog.dismiss();            }        });    }    @OnClick(R.id.fbButton)    void fbClick() {        com.facebook.login.LoginManager.getInstance().logIn(this, Arrays.asList("public_profile"));    }    @OnClick(R.id.vkButton)    void vkClick() {        VKSdk.login(this);    }    @OnClick(R.id.instButton)    void instClick() {    }    @Override    public void onInstTokenReceived(String auth_token) {    }    @OnClick(R.id.enterButton)    void enterClick() {        nameEditText.setError(null);        String login = nameEditText.getText().toString().trim();        if (TextUtils.isEmpty(login)) {            nameEditText.setError(getString(R.string.error_field_required));            nameEditText.requestFocus();            return;        }        loginManager.sendUsername(login, uniqueUUID, new DtoCallback<ResponseDto>() {            @Override            public void onSuccessful(@NonNull ResponseDto response) {                RegistrationResponseDto responseDto = (RegistrationResponseDto) response;                String userID = responseDto.getUserId();                Timber.d("registration %s", userID);                saveUserID(userID);                regWaitingDialog = DialogUtils.showWaitingDialog(                        mActivity,                        R.string.registration_dialog_title,                        R.string.waiting_dialog_msg);                usernameReg(userID);            }            @Override            public void onFailed(FailTypes fail) {                Toast.makeText(mActivity, "failed", Toast.LENGTH_SHORT).show();                Timber.d("registration failed");            }        });    }    private void saveUserID(String userID) {        String deviceName = userID + BASE_DEVICE_NAME_PART;        deviceNameSP.set(deviceName);        bleManager.setBluetoothAdapterName(deviceName);    }    private void usernameReg(String userID) {        loginManager.login(userID, uniqueUUID, new DtoCallback<ResponseDto>() {            @Override            public void onSuccessful(@NonNull ResponseDto response) {                regWaitingDialog.dismiss();                setResult(RESULT_OK);                finish();            }            @Override            public void onFailed(FailTypes fail) {            }        });    }    void checkPermissions() {        if (ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {                requestPermissions(new String[]{Manifest.permission.ACCESS_COARSE_LOCATION},                        LOCATION_PERMISSION_CODE);            }        }    }    @Override    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {        super.onRequestPermissionsResult(requestCode, permissions, grantResults);        if (requestCode == LOCATION_PERMISSION_CODE) {            if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {                Toast.makeText(getApplicationContext(), "permission granted", Toast.LENGTH_SHORT).show();                onResume();            }        }    }}